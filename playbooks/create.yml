---
- name: Openshift cluster on Classic infra.
  hosts: localhost
  collections:
   - ibm.cloudcollection
  tasks:
    - name: Fetch the variables from var file
      include_vars:
        file: vars.yml

    - name: Check if cluster Exists
      ibm_container_cluster_info:
        name: "{{ cluster_name }}"
      failed_when:
        - cluster_output.rc != 0
        - '"cluster could not be found" not in cluster_output.stderr'
      register: cluster_output

    - name: Save Cluster info
      set_stats:
        data:
          cluster_info: "{{ cluster_output.resource }}"
      when: cluster_output.rc==0

    - name: set cluster info
      set_fact:
        cluster_info: "{{ cluster_output.resource }}"
    
    - name: Create Openshift Cluster
      ibm_container_cluster:
        name: "{{ cluster_name }}"
        datacenter: "{{ datacenter }}"
        hardware: "{{ hardware }}"
        kube_version: "{{ kube_version }}"
        public_vlan_id: "{{ public_vlan_id }}"
        private_vlan_id: "{{ private_vlan_id }}"
        default_pool_size: "{{ default_worker_ppol_size }}"
        entitlement: "{{ entitlement }}"
      register: cluster_create_output
      when: cluster_output.rc != 0

    - name: save created cluster info
      set_stats:
        data:
          cluster_info: "{{ cluster_create_output.resource }}"
      when: cluster_create_output.resource.id is defined

    - name: Save Cluster config File
      ibm_container_cluster_config_info:
        cluster_name_id: "{{cluster_output.resource.id}}"
      register: config_output

    - name: save cluster config path
      set_stats:
        data:
          cluster_config: "{{ lookup('file', config_output.resource.config_file_path) }}"

    - name: save cluster config path as fact
      set_fact:
        cluster_config: "{{ lookup('file', config_output.resource.config_file_path) }}"

      